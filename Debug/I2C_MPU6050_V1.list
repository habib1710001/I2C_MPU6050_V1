
I2C_MPU6050_V1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000035c  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000520  08000528  00010528  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000520  08000520  00010528  2**0
                  CONTENTS
  4 .ARM          00000000  08000520  08000520  00010528  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000520  08000528  00010528  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000520  08000520  00010520  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000524  08000524  00010524  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010528  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000528  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000528  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00010528  2**0
                  CONTENTS, READONLY
 12 .debug_info   000005d6  00000000  00000000  00010558  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000018f  00000000  00000000  00010b2e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000090  00000000  00000000  00010cc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000068  00000000  00000000  00010d50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018b56  00000000  00000000  00010db8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000c02  00000000  00000000  0002990e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008aefe  00000000  00000000  0002a510  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000b540e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000140  00000000  00000000  000b5460  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000000 	.word	0x20000000
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08000508 	.word	0x08000508

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000004 	.word	0x20000004
 8000200:	08000508 	.word	0x08000508

08000204 <I2C_init>:
 * Configure the rise time register
 * Program the I2C_CR1 register to enable the peripheral
 * */


void I2C_init(void){
 8000204:	b480      	push	{r7}
 8000206:	af00      	add	r7, sp, #0
	// Enable clock for the I2C
	RCC -> APB1ENR |= I2C1EN;
 8000208:	4b56      	ldr	r3, [pc, #344]	; (8000364 <I2C_init+0x160>)
 800020a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800020c:	4a55      	ldr	r2, [pc, #340]	; (8000364 <I2C_init+0x160>)
 800020e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000212:	6413      	str	r3, [r2, #64]	; 0x40

	//Enable the GPIOB Clock
	RCC -> AHB1ENR |= GPIOBEN;
 8000214:	4b53      	ldr	r3, [pc, #332]	; (8000364 <I2C_init+0x160>)
 8000216:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000218:	4a52      	ldr	r2, [pc, #328]	; (8000364 <I2C_init+0x160>)
 800021a:	f043 0302 	orr.w	r3, r3, #2
 800021e:	6313      	str	r3, [r2, #48]	; 0x30

	//Enables the Alternate function for the GPIO
	//MODER8
	GPIOB -> MODER &=~(1U << 16);
 8000220:	4b51      	ldr	r3, [pc, #324]	; (8000368 <I2C_init+0x164>)
 8000222:	681b      	ldr	r3, [r3, #0]
 8000224:	4a50      	ldr	r2, [pc, #320]	; (8000368 <I2C_init+0x164>)
 8000226:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800022a:	6013      	str	r3, [r2, #0]
	GPIOB -> MODER |=  (1U << 17);
 800022c:	4b4e      	ldr	r3, [pc, #312]	; (8000368 <I2C_init+0x164>)
 800022e:	681b      	ldr	r3, [r3, #0]
 8000230:	4a4d      	ldr	r2, [pc, #308]	; (8000368 <I2C_init+0x164>)
 8000232:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000236:	6013      	str	r3, [r2, #0]

	//MODER9
	GPIOB -> MODER &=~(1U << 18);
 8000238:	4b4b      	ldr	r3, [pc, #300]	; (8000368 <I2C_init+0x164>)
 800023a:	681b      	ldr	r3, [r3, #0]
 800023c:	4a4a      	ldr	r2, [pc, #296]	; (8000368 <I2C_init+0x164>)
 800023e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000242:	6013      	str	r3, [r2, #0]
	GPIOB -> MODER |=  (1U << 19);
 8000244:	4b48      	ldr	r3, [pc, #288]	; (8000368 <I2C_init+0x164>)
 8000246:	681b      	ldr	r3, [r3, #0]
 8000248:	4a47      	ldr	r2, [pc, #284]	; (8000368 <I2C_init+0x164>)
 800024a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800024e:	6013      	str	r3, [r2, #0]

	//Configuring the output type  -> Open Drain
	GPIOB -> OTYPER |= OTYPER_OT8;
 8000250:	4b45      	ldr	r3, [pc, #276]	; (8000368 <I2C_init+0x164>)
 8000252:	685b      	ldr	r3, [r3, #4]
 8000254:	4a44      	ldr	r2, [pc, #272]	; (8000368 <I2C_init+0x164>)
 8000256:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800025a:	6053      	str	r3, [r2, #4]
	GPIOB -> OTYPER |= OTYPER_OT9;
 800025c:	4b42      	ldr	r3, [pc, #264]	; (8000368 <I2C_init+0x164>)
 800025e:	685b      	ldr	r3, [r3, #4]
 8000260:	4a41      	ldr	r2, [pc, #260]	; (8000368 <I2C_init+0x164>)
 8000262:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000266:	6053      	str	r3, [r2, #4]

	//Configuring the high-speed   -> High Speed
	//OSPEEDR8
	GPIOB-> OSPEEDR |= ((1U << 17) | (1U << 16));
 8000268:	4b3f      	ldr	r3, [pc, #252]	; (8000368 <I2C_init+0x164>)
 800026a:	689b      	ldr	r3, [r3, #8]
 800026c:	4a3e      	ldr	r2, [pc, #248]	; (8000368 <I2C_init+0x164>)
 800026e:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
 8000272:	6093      	str	r3, [r2, #8]
	//OSPEEDR9
	GPIOB-> OSPEEDR |= ((1U << 19) | (1U << 18));
 8000274:	4b3c      	ldr	r3, [pc, #240]	; (8000368 <I2C_init+0x164>)
 8000276:	689b      	ldr	r3, [r3, #8]
 8000278:	4a3b      	ldr	r2, [pc, #236]	; (8000368 <I2C_init+0x164>)
 800027a:	f443 2340 	orr.w	r3, r3, #786432	; 0xc0000
 800027e:	6093      	str	r3, [r2, #8]
	//Selecting  the pull-up in the GPIO
	//Itâ€™s better to use external pull up registers while using I2C,
	//but just for Simplicity internal pull-up resistors is used

	//PUPDR8
	GPIOB-> PUPDR |=  (1U << 16);
 8000280:	4b39      	ldr	r3, [pc, #228]	; (8000368 <I2C_init+0x164>)
 8000282:	68db      	ldr	r3, [r3, #12]
 8000284:	4a38      	ldr	r2, [pc, #224]	; (8000368 <I2C_init+0x164>)
 8000286:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800028a:	60d3      	str	r3, [r2, #12]
	GPIOB-> PUPDR &=~(1U << 17);
 800028c:	4b36      	ldr	r3, [pc, #216]	; (8000368 <I2C_init+0x164>)
 800028e:	68db      	ldr	r3, [r3, #12]
 8000290:	4a35      	ldr	r2, [pc, #212]	; (8000368 <I2C_init+0x164>)
 8000292:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8000296:	60d3      	str	r3, [r2, #12]
	//PUPDR9
	GPIOB-> PUPDR |=  (1U << 18);
 8000298:	4b33      	ldr	r3, [pc, #204]	; (8000368 <I2C_init+0x164>)
 800029a:	68db      	ldr	r3, [r3, #12]
 800029c:	4a32      	ldr	r2, [pc, #200]	; (8000368 <I2C_init+0x164>)
 800029e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80002a2:	60d3      	str	r3, [r2, #12]
	GPIOB-> PUPDR &=~(1U << 19);
 80002a4:	4b30      	ldr	r3, [pc, #192]	; (8000368 <I2C_init+0x164>)
 80002a6:	68db      	ldr	r3, [r3, #12]
 80002a8:	4a2f      	ldr	r2, [pc, #188]	; (8000368 <I2C_init+0x164>)
 80002aa:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 80002ae:	60d3      	str	r3, [r2, #12]

	//Configure the Alternate Function in the AFR Register
	//the pins were set in the alternate functions mode,
	//but that was not defined what those functions should be.
	GPIOB-> AFR[1] &=~(1U << 0);
 80002b0:	4b2d      	ldr	r3, [pc, #180]	; (8000368 <I2C_init+0x164>)
 80002b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80002b4:	4a2c      	ldr	r2, [pc, #176]	; (8000368 <I2C_init+0x164>)
 80002b6:	f023 0301 	bic.w	r3, r3, #1
 80002ba:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOB-> AFR[1] &=~(1U << 1);
 80002bc:	4b2a      	ldr	r3, [pc, #168]	; (8000368 <I2C_init+0x164>)
 80002be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80002c0:	4a29      	ldr	r2, [pc, #164]	; (8000368 <I2C_init+0x164>)
 80002c2:	f023 0302 	bic.w	r3, r3, #2
 80002c6:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOB-> AFR[1] |= (1U << 2);
 80002c8:	4b27      	ldr	r3, [pc, #156]	; (8000368 <I2C_init+0x164>)
 80002ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80002cc:	4a26      	ldr	r2, [pc, #152]	; (8000368 <I2C_init+0x164>)
 80002ce:	f043 0304 	orr.w	r3, r3, #4
 80002d2:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOB-> AFR[1] &=~(1U << 3);
 80002d4:	4b24      	ldr	r3, [pc, #144]	; (8000368 <I2C_init+0x164>)
 80002d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80002d8:	4a23      	ldr	r2, [pc, #140]	; (8000368 <I2C_init+0x164>)
 80002da:	f023 0308 	bic.w	r3, r3, #8
 80002de:	6253      	str	r3, [r2, #36]	; 0x24

	GPIOB-> AFR[1] &=~(1U << 4);
 80002e0:	4b21      	ldr	r3, [pc, #132]	; (8000368 <I2C_init+0x164>)
 80002e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80002e4:	4a20      	ldr	r2, [pc, #128]	; (8000368 <I2C_init+0x164>)
 80002e6:	f023 0310 	bic.w	r3, r3, #16
 80002ea:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOB-> AFR[1] &=~(1U << 5);
 80002ec:	4b1e      	ldr	r3, [pc, #120]	; (8000368 <I2C_init+0x164>)
 80002ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80002f0:	4a1d      	ldr	r2, [pc, #116]	; (8000368 <I2C_init+0x164>)
 80002f2:	f023 0320 	bic.w	r3, r3, #32
 80002f6:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOB-> AFR[1] |= (1U << 6);
 80002f8:	4b1b      	ldr	r3, [pc, #108]	; (8000368 <I2C_init+0x164>)
 80002fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80002fc:	4a1a      	ldr	r2, [pc, #104]	; (8000368 <I2C_init+0x164>)
 80002fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000302:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOB-> AFR[1] &=~(1U << 7);
 8000304:	4b18      	ldr	r3, [pc, #96]	; (8000368 <I2C_init+0x164>)
 8000306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000308:	4a17      	ldr	r2, [pc, #92]	; (8000368 <I2C_init+0x164>)
 800030a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800030e:	6253      	str	r3, [r2, #36]	; 0x24


	//Reset the I2C -> Make sure I2C lines are released
	I2C1 -> CR1 |= SWRST;
 8000310:	4b16      	ldr	r3, [pc, #88]	; (800036c <I2C_init+0x168>)
 8000312:	681b      	ldr	r3, [r3, #0]
 8000314:	4a15      	ldr	r2, [pc, #84]	; (800036c <I2C_init+0x168>)
 8000316:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800031a:	6013      	str	r3, [r2, #0]
	I2C1 -> CR1 &=~SWRST;
 800031c:	4b13      	ldr	r3, [pc, #76]	; (800036c <I2C_init+0x168>)
 800031e:	681b      	ldr	r3, [r3, #0]
 8000320:	4a12      	ldr	r2, [pc, #72]	; (800036c <I2C_init+0x168>)
 8000322:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000326:	6013      	str	r3, [r2, #0]


	//Program the peripheral input clock in I2C_CR2 Register in order to generate correct timing
	I2C1 -> CR2 |= (16<<0);   //PCLK1 frequency in MHz
 8000328:	4b10      	ldr	r3, [pc, #64]	; (800036c <I2C_init+0x168>)
 800032a:	685b      	ldr	r3, [r3, #4]
 800032c:	4a0f      	ldr	r2, [pc, #60]	; (800036c <I2C_init+0x168>)
 800032e:	f043 0310 	orr.w	r3, r3, #16
 8000332:	6053      	str	r3, [r2, #4]


	//T_high  = CCR * TPCLK1 ; T_high  = t_r(SCL) + t_w(SCLH)
	//CCR = (t_r(SCL) + t_w(SCLH))/TPCLK1 = (1000ns + 4000ns)/(62.5ns) = 80
	I2C1  -> CCR |= (80<<0);  //CCR Value
 8000334:	4b0d      	ldr	r3, [pc, #52]	; (800036c <I2C_init+0x168>)
 8000336:	69db      	ldr	r3, [r3, #28]
 8000338:	4a0c      	ldr	r2, [pc, #48]	; (800036c <I2C_init+0x168>)
 800033a:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 800033e:	61d3      	str	r3, [r2, #28]

	// Configure the rise time register
	// TRISE = (T_r(SCL)/T(PCLK1))+1 = (1000 / 62.5) + 1 = 17
	I2C1 -> TRISE |= SD_MODE_MAX_RISE_TIME;
 8000340:	4b0a      	ldr	r3, [pc, #40]	; (800036c <I2C_init+0x168>)
 8000342:	6a1b      	ldr	r3, [r3, #32]
 8000344:	4a09      	ldr	r2, [pc, #36]	; (800036c <I2C_init+0x168>)
 8000346:	f043 0311 	orr.w	r3, r3, #17
 800034a:	6213      	str	r3, [r2, #32]

	//Enable the peripheral
	I2C1 -> CR1 |= CR1_PE;
 800034c:	4b07      	ldr	r3, [pc, #28]	; (800036c <I2C_init+0x168>)
 800034e:	681b      	ldr	r3, [r3, #0]
 8000350:	4a06      	ldr	r2, [pc, #24]	; (800036c <I2C_init+0x168>)
 8000352:	f043 0301 	orr.w	r3, r3, #1
 8000356:	6013      	str	r3, [r2, #0]
}
 8000358:	bf00      	nop
 800035a:	46bd      	mov	sp, r7
 800035c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000360:	4770      	bx	lr
 8000362:	bf00      	nop
 8000364:	40023800 	.word	0x40023800
 8000368:	40020400 	.word	0x40020400
 800036c:	40005400 	.word	0x40005400

08000370 <I2C_Start>:

void I2C_Start(void){
 8000370:	b480      	push	{r7}
 8000372:	af00      	add	r7, sp, #0

	//Acknowledge Enabled
	I2C1 -> CR1 |= CR1_ACK;
 8000374:	4b0c      	ldr	r3, [pc, #48]	; (80003a8 <I2C_Start+0x38>)
 8000376:	681b      	ldr	r3, [r3, #0]
 8000378:	4a0b      	ldr	r2, [pc, #44]	; (80003a8 <I2C_Start+0x38>)
 800037a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800037e:	6013      	str	r3, [r2, #0]

	//Generate the Start condition
	I2C1 -> CR1 |= CR1_START;
 8000380:	4b09      	ldr	r3, [pc, #36]	; (80003a8 <I2C_Start+0x38>)
 8000382:	681b      	ldr	r3, [r3, #0]
 8000384:	4a08      	ldr	r2, [pc, #32]	; (80003a8 <I2C_Start+0x38>)
 8000386:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800038a:	6013      	str	r3, [r2, #0]

	//wait until the start condition is generated
	while(!((I2C1 -> SR1) & (SR1_SB))){}
 800038c:	bf00      	nop
 800038e:	4b06      	ldr	r3, [pc, #24]	; (80003a8 <I2C_Start+0x38>)
 8000390:	695b      	ldr	r3, [r3, #20]
 8000392:	f003 0301 	and.w	r3, r3, #1
 8000396:	2b00      	cmp	r3, #0
 8000398:	d0f9      	beq.n	800038e <I2C_Start+0x1e>
}
 800039a:	bf00      	nop
 800039c:	bf00      	nop
 800039e:	46bd      	mov	sp, r7
 80003a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003a4:	4770      	bx	lr
 80003a6:	bf00      	nop
 80003a8:	40005400 	.word	0x40005400

080003ac <I2C_Address>:

void I2C_Address(uint8_t address){
 80003ac:	b480      	push	{r7}
 80003ae:	b085      	sub	sp, #20
 80003b0:	af00      	add	r7, sp, #0
 80003b2:	4603      	mov	r3, r0
 80003b4:	71fb      	strb	r3, [r7, #7]

	//Transmit address
	I2C1 -> DR = address;
 80003b6:	4a0c      	ldr	r2, [pc, #48]	; (80003e8 <I2C_Address+0x3c>)
 80003b8:	79fb      	ldrb	r3, [r7, #7]
 80003ba:	6113      	str	r3, [r2, #16]

	//wait until the address transmission is done
	while (!((I2C1 -> SR1) & (SR1_ADDR)));
 80003bc:	bf00      	nop
 80003be:	4b0a      	ldr	r3, [pc, #40]	; (80003e8 <I2C_Address+0x3c>)
 80003c0:	695b      	ldr	r3, [r3, #20]
 80003c2:	f003 0302 	and.w	r3, r3, #2
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d0f9      	beq.n	80003be <I2C_Address+0x12>

	//Read SR1 and SR2 to clear the ADDR Bit
	uint16_t temp = ((I2C1 -> SR1) | (I2C1 -> SR2));
 80003ca:	4b07      	ldr	r3, [pc, #28]	; (80003e8 <I2C_Address+0x3c>)
 80003cc:	695b      	ldr	r3, [r3, #20]
 80003ce:	b29a      	uxth	r2, r3
 80003d0:	4b05      	ldr	r3, [pc, #20]	; (80003e8 <I2C_Address+0x3c>)
 80003d2:	699b      	ldr	r3, [r3, #24]
 80003d4:	b29b      	uxth	r3, r3
 80003d6:	4313      	orrs	r3, r2
 80003d8:	81fb      	strh	r3, [r7, #14]
}
 80003da:	bf00      	nop
 80003dc:	3714      	adds	r7, #20
 80003de:	46bd      	mov	sp, r7
 80003e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003e4:	4770      	bx	lr
 80003e6:	bf00      	nop
 80003e8:	40005400 	.word	0x40005400

080003ec <I2C_Write>:


void I2C_Write(uint8_t data){
 80003ec:	b480      	push	{r7}
 80003ee:	b083      	sub	sp, #12
 80003f0:	af00      	add	r7, sp, #0
 80003f2:	4603      	mov	r3, r0
 80003f4:	71fb      	strb	r3, [r7, #7]

	//wait until the last address transmission is done
    while (!((I2C1 -> SR1) & (SR1_TxE)));
 80003f6:	bf00      	nop
 80003f8:	4b0b      	ldr	r3, [pc, #44]	; (8000428 <I2C_Write+0x3c>)
 80003fa:	695b      	ldr	r3, [r3, #20]
 80003fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000400:	2b00      	cmp	r3, #0
 8000402:	d0f9      	beq.n	80003f8 <I2C_Write+0xc>

    //Transmit address + read
	I2C1 -> DR = data;
 8000404:	4a08      	ldr	r2, [pc, #32]	; (8000428 <I2C_Write+0x3c>)
 8000406:	79fb      	ldrb	r3, [r7, #7]
 8000408:	6113      	str	r3, [r2, #16]

	//Wait until the data byte transfer is completed
    while (!((I2C1 -> SR1) & (SR1_BTF)));
 800040a:	bf00      	nop
 800040c:	4b06      	ldr	r3, [pc, #24]	; (8000428 <I2C_Write+0x3c>)
 800040e:	695b      	ldr	r3, [r3, #20]
 8000410:	f003 0304 	and.w	r3, r3, #4
 8000414:	2b00      	cmp	r3, #0
 8000416:	d0f9      	beq.n	800040c <I2C_Write+0x20>

}
 8000418:	bf00      	nop
 800041a:	bf00      	nop
 800041c:	370c      	adds	r7, #12
 800041e:	46bd      	mov	sp, r7
 8000420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000424:	4770      	bx	lr
 8000426:	bf00      	nop
 8000428:	40005400 	.word	0x40005400

0800042c <I2C_Stop>:
    while (!((I2C1 -> SR1) & (SR1_BTF))){}

}


void I2C_Stop(void){
 800042c:	b480      	push	{r7}
 800042e:	af00      	add	r7, sp, #0
    //Generate the stop bit
	I2C1 -> CR1 |= CR1_STOP;
 8000430:	4b05      	ldr	r3, [pc, #20]	; (8000448 <I2C_Stop+0x1c>)
 8000432:	681b      	ldr	r3, [r3, #0]
 8000434:	4a04      	ldr	r2, [pc, #16]	; (8000448 <I2C_Stop+0x1c>)
 8000436:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800043a:	6013      	str	r3, [r2, #0]
}
 800043c:	bf00      	nop
 800043e:	46bd      	mov	sp, r7
 8000440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000444:	4770      	bx	lr
 8000446:	bf00      	nop
 8000448:	40005400 	.word	0x40005400

0800044c <main>:
#include "i2c.h"
#include "stdint.h"

int main(void)
{
 800044c:	b580      	push	{r7, lr}
 800044e:	af00      	add	r7, sp, #0
	//Initializes the I2C Pins
	I2C_init();
 8000450:	f7ff fed8 	bl	8000204 <I2C_init>
	while(1)
	{
	//Generate Start Bit
	I2C_Start();
 8000454:	f7ff ff8c 	bl	8000370 <I2C_Start>
	//Send the slave address
	I2C_Address(0x3F);
 8000458:	203f      	movs	r0, #63	; 0x3f
 800045a:	f7ff ffa7 	bl	80003ac <I2C_Address>
	//Write the data
	I2C_Write(0x00);
 800045e:	2000      	movs	r0, #0
 8000460:	f7ff ffc4 	bl	80003ec <I2C_Write>
	//Generate stop bit
	I2C_Stop();
 8000464:	f7ff ffe2 	bl	800042c <I2C_Stop>
	I2C_Start();
 8000468:	e7f4      	b.n	8000454 <main+0x8>
	...

0800046c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800046c:	480d      	ldr	r0, [pc, #52]	; (80004a4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800046e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000470:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000474:	480c      	ldr	r0, [pc, #48]	; (80004a8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000476:	490d      	ldr	r1, [pc, #52]	; (80004ac <LoopForever+0xa>)
  ldr r2, =_sidata
 8000478:	4a0d      	ldr	r2, [pc, #52]	; (80004b0 <LoopForever+0xe>)
  movs r3, #0
 800047a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800047c:	e002      	b.n	8000484 <LoopCopyDataInit>

0800047e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800047e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000480:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000482:	3304      	adds	r3, #4

08000484 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000484:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000486:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000488:	d3f9      	bcc.n	800047e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800048a:	4a0a      	ldr	r2, [pc, #40]	; (80004b4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800048c:	4c0a      	ldr	r4, [pc, #40]	; (80004b8 <LoopForever+0x16>)
  movs r3, #0
 800048e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000490:	e001      	b.n	8000496 <LoopFillZerobss>

08000492 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000492:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000494:	3204      	adds	r2, #4

08000496 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000496:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000498:	d3fb      	bcc.n	8000492 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800049a:	f000 f811 	bl	80004c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800049e:	f7ff ffd5 	bl	800044c <main>

080004a2 <LoopForever>:

LoopForever:
  b LoopForever
 80004a2:	e7fe      	b.n	80004a2 <LoopForever>
  ldr   r0, =_estack
 80004a4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80004a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80004ac:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80004b0:	08000528 	.word	0x08000528
  ldr r2, =_sbss
 80004b4:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80004b8:	2000001c 	.word	0x2000001c

080004bc <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80004bc:	e7fe      	b.n	80004bc <ADC_IRQHandler>
	...

080004c0 <__libc_init_array>:
 80004c0:	b570      	push	{r4, r5, r6, lr}
 80004c2:	4d0d      	ldr	r5, [pc, #52]	; (80004f8 <__libc_init_array+0x38>)
 80004c4:	4c0d      	ldr	r4, [pc, #52]	; (80004fc <__libc_init_array+0x3c>)
 80004c6:	1b64      	subs	r4, r4, r5
 80004c8:	10a4      	asrs	r4, r4, #2
 80004ca:	2600      	movs	r6, #0
 80004cc:	42a6      	cmp	r6, r4
 80004ce:	d109      	bne.n	80004e4 <__libc_init_array+0x24>
 80004d0:	4d0b      	ldr	r5, [pc, #44]	; (8000500 <__libc_init_array+0x40>)
 80004d2:	4c0c      	ldr	r4, [pc, #48]	; (8000504 <__libc_init_array+0x44>)
 80004d4:	f000 f818 	bl	8000508 <_init>
 80004d8:	1b64      	subs	r4, r4, r5
 80004da:	10a4      	asrs	r4, r4, #2
 80004dc:	2600      	movs	r6, #0
 80004de:	42a6      	cmp	r6, r4
 80004e0:	d105      	bne.n	80004ee <__libc_init_array+0x2e>
 80004e2:	bd70      	pop	{r4, r5, r6, pc}
 80004e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80004e8:	4798      	blx	r3
 80004ea:	3601      	adds	r6, #1
 80004ec:	e7ee      	b.n	80004cc <__libc_init_array+0xc>
 80004ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80004f2:	4798      	blx	r3
 80004f4:	3601      	adds	r6, #1
 80004f6:	e7f2      	b.n	80004de <__libc_init_array+0x1e>
 80004f8:	08000520 	.word	0x08000520
 80004fc:	08000520 	.word	0x08000520
 8000500:	08000520 	.word	0x08000520
 8000504:	08000524 	.word	0x08000524

08000508 <_init>:
 8000508:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800050a:	bf00      	nop
 800050c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800050e:	bc08      	pop	{r3}
 8000510:	469e      	mov	lr, r3
 8000512:	4770      	bx	lr

08000514 <_fini>:
 8000514:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000516:	bf00      	nop
 8000518:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800051a:	bc08      	pop	{r3}
 800051c:	469e      	mov	lr, r3
 800051e:	4770      	bx	lr
